-- sanity check of system catalog
SELECT attrelid, attname, attgenerated FROM pg_attribute WHERE attgenerated NOT IN ('', 's');
 attrelid | attname | attgenerated 
----------+---------+--------------
(0 rows)

CREATE TABLE gtest0 (a int, b int GENERATED ALWAYS AS (55) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest1 (a int, b int GENERATED ALWAYS AS (a * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT table_name, column_name, column_default, is_nullable, is_generated, generation_expression FROM information_schema.columns WHERE table_name LIKE 'gtest_' ORDER BY 1, 2;
 table_name | column_name | column_default | is_nullable | is_generated | generation_expression 
------------+-------------+----------------+-------------+--------------+-----------------------
 gtest0     | a           |                | YES         | NEVER        | 
 gtest0     | b           |                | YES         | ALWAYS       | 55
 gtest1     | a           |                | YES         | NEVER        | 
 gtest1     | b           |                | YES         | ALWAYS       | (a * 2)
(4 rows)

SELECT table_name, column_name, dependent_column FROM information_schema.column_column_usage ORDER BY 1, 2, 3;
 table_name | column_name | dependent_column 
------------+-------------+------------------
 gtest1     | a           | b
(1 row)

\d gtest1
                            Table "public.gtest1"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 a      | integer |           |          | 
 b      | integer |           |          | generated always as (a * 2) stored
Checksum: t
Distributed by: (a)

-- duplicate generated
CREATE TABLE gtest_err_1 (a int, b int GENERATED ALWAYS AS (a * 2) STORED GENERATED ALWAYS AS (a * 3) STORED);
ERROR:  multiple generation clauses specified for column "b" of table "gtest_err_1"
LINE 1: ... (a int, b int GENERATED ALWAYS AS (a * 2) STORED GENERATED ...
                                                             ^
-- references to other generated columns, including self-references
CREATE TABLE gtest_err_2a (a int, b int GENERATED ALWAYS AS (b * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  cannot use generated column "b" in column generation expression
LINE 1: ...E gtest_err_2a (a int, b int GENERATED ALWAYS AS (b * 2) STO...
                                                             ^
DETAIL:  A generated column cannot reference another generated column.
CREATE TABLE gtest_err_2b (a int, b int GENERATED ALWAYS AS (a * 2) STORED, c int GENERATED ALWAYS AS (b * 3) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  cannot use generated column "b" in column generation expression
LINE 1: ...AYS AS (a * 2) STORED, c int GENERATED ALWAYS AS (b * 3) STO...
                                                             ^
DETAIL:  A generated column cannot reference another generated column.
-- a whole-row var is a self-reference on steroids, so disallow that too
CREATE TABLE gtest_err_2c (a int,
    b int GENERATED ALWAYS AS (num_nulls(gtest_err_2c)) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  cannot use whole-row variable in column generation expression
LINE 2:     b int GENERATED ALWAYS AS (num_nulls(gtest_err_2c)) STOR...
                                                 ^
DETAIL:  This would cause the generated column to depend on its own value.
-- invalid reference
CREATE TABLE gtest_err_3 (a int, b int GENERATED ALWAYS AS (c * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  column "c" does not exist
LINE 1: ...LE gtest_err_3 (a int, b int GENERATED ALWAYS AS (c * 2) STO...
                                                             ^
-- generation expression must be immutable
CREATE TABLE gtest_err_4 (a int, b double precision GENERATED ALWAYS AS (random()) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  generation expression is not immutable
-- cannot have default/identity and generated
CREATE TABLE gtest_err_5a (a int, b int DEFAULT 5 GENERATED ALWAYS AS (a * 2) STORED);
ERROR:  both default and generation expression specified for column "b" of table "gtest_err_5a"
LINE 1: CREATE TABLE gtest_err_5a (a int, b int DEFAULT 5 GENERATED ...
                                                          ^
CREATE TABLE gtest_err_5b (a int, b int GENERATED ALWAYS AS identity GENERATED ALWAYS AS (a * 2) STORED);
ERROR:  both identity and generation expression specified for column "b" of table "gtest_err_5b"
LINE 1: ...err_5b (a int, b int GENERATED ALWAYS AS identity GENERATED ...
                                                             ^
-- reference to system column not allowed in generated column
-- (except tableoid, which we test below)
CREATE TABLE gtest_err_6a (a int, b bool GENERATED ALWAYS AS (xmin <> 37) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  cannot use system column "xmin" in column generation expression
LINE 1: ... gtest_err_6a (a int, b bool GENERATED ALWAYS AS (xmin <> 37...
                                                             ^
-- various prohibited constructs
CREATE TABLE gtest_err_7a (a int, b int GENERATED ALWAYS AS (avg(a)) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  aggregate functions are not allowed in column generation expressions
LINE 1: ...E gtest_err_7a (a int, b int GENERATED ALWAYS AS (avg(a)) ST...
                                                             ^
CREATE TABLE gtest_err_7b (a int, b int GENERATED ALWAYS AS (row_number() OVER (ORDER BY a)) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  window functions are not allowed in column generation expressions
LINE 1: ...E gtest_err_7b (a int, b int GENERATED ALWAYS AS (row_number...
                                                             ^
CREATE TABLE gtest_err_7c (a int, b int GENERATED ALWAYS AS ((SELECT a)) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  cannot use subquery in column generation expression
LINE 1: ...E gtest_err_7c (a int, b int GENERATED ALWAYS AS ((SELECT a)...
                                                             ^
CREATE TABLE gtest_err_7d (a int, b int GENERATED ALWAYS AS (generate_series(1, a)) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  set-returning functions are not allowed in column generation expressions
LINE 1: ...E gtest_err_7d (a int, b int GENERATED ALWAYS AS (generate_s...
                                                             ^
-- GENERATED BY DEFAULT not allowed
CREATE TABLE gtest_err_8 (a int, b int GENERATED BY DEFAULT AS (a * 2) STORED);
ERROR:  for a generated column, GENERATED ALWAYS must be specified
LINE 1: CREATE TABLE gtest_err_8 (a int, b int GENERATED BY DEFAULT ...
                                                         ^
INSERT INTO gtest1 VALUES (1);
INSERT INTO gtest1 VALUES (2, DEFAULT);  -- ok
INSERT INTO gtest1 VALUES (3, 33);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1 VALUES (3, 33), (4, 44);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1 VALUES (3, DEFAULT), (4, 44);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1 VALUES (3, 33), (4, DEFAULT);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1 VALUES (3, DEFAULT), (4, DEFAULT);  -- ok
SELECT * FROM gtest1 ORDER BY a;
 a | b 
---+---
 1 | 2
 2 | 4
 3 | 6
 4 | 8
(4 rows)

DELETE FROM gtest1 WHERE a >= 3;
UPDATE gtest1 SET b = DEFAULT WHERE a = 1;
UPDATE gtest1 SET b = 11 WHERE a = 1;  -- error
ERROR:  column "b" can only be updated to DEFAULT
DETAIL:  Column "b" is a generated column.
SELECT * FROM gtest1 ORDER BY a;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

SELECT a, b, b * 2 AS b2 FROM gtest1 ORDER BY a;
 a | b | b2 
---+---+----
 1 | 2 |  4
 2 | 4 |  8
(2 rows)

SELECT a, b FROM gtest1 WHERE b = 4 ORDER BY a;
 a | b 
---+---
 2 | 4
(1 row)

-- test that overflow error happens on write
INSERT INTO gtest1 VALUES (2000000000);
ERROR:  integer out of range  (seg1 127.0.1.1:7003 pid=18418)
SELECT * FROM gtest1;
 a | b 
---+---
 2 | 4
 1 | 2
(2 rows)

DELETE FROM gtest1 WHERE a = 2000000000;
-- test with joins
CREATE TABLE gtestx (x int, y int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtestx VALUES (11, 1), (22, 2), (33, 3);
SELECT * FROM gtestx, gtest1 WHERE gtestx.y = gtest1.a;
 x  | y | a | b 
----+---+---+---
 11 | 1 | 1 | 2
 22 | 2 | 2 | 4
(2 rows)

DROP TABLE gtestx;
-- test UPDATE/DELETE quals
SELECT * FROM gtest1 ORDER BY a;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

UPDATE gtest1 SET a = 3 WHERE b = 4;
SELECT * FROM gtest1 ORDER BY a;
 a | b 
---+---
 1 | 2
 3 | 6
(2 rows)

DELETE FROM gtest1 WHERE b = 2;
SELECT * FROM gtest1 ORDER BY a;
 a | b 
---+---
 3 | 6
(1 row)

-- views
CREATE VIEW gtest1v AS SELECT * FROM gtest1;
SELECT * FROM gtest1v;
 a | b 
---+---
 3 | 6
(1 row)

INSERT INTO gtest1v VALUES (4, 8);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1v VALUES (5, DEFAULT);  -- ok
INSERT INTO gtest1v VALUES (6, 66), (7, 77);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1v VALUES (6, DEFAULT), (7, 77);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1v VALUES (6, 66), (7, DEFAULT);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1v VALUES (6, DEFAULT), (7, DEFAULT);  -- ok
ALTER VIEW gtest1v ALTER COLUMN b SET DEFAULT 100;
INSERT INTO gtest1v VALUES (8, DEFAULT);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
INSERT INTO gtest1v VALUES (8, DEFAULT), (9, DEFAULT);  -- error
ERROR:  cannot insert a non-DEFAULT value into column "b"
DETAIL:  Column "b" is a generated column.
SELECT * FROM gtest1v;
 a | b  
---+----
 3 |  6
 7 | 14
 5 | 10
 6 | 12
(4 rows)

DELETE FROM gtest1v WHERE a >= 5;
DROP VIEW gtest1v;
-- CTEs
WITH foo AS (SELECT * FROM gtest1) SELECT * FROM foo;
 a | b 
---+---
 3 | 6
(1 row)

-- inheritance
CREATE TABLE gtest1_1 () INHERITS (gtest1);
NOTICE:  table has parent, setting distribution columns to match parent table
SELECT * FROM gtest1_1;
 a | b 
---+---
(0 rows)

\d gtest1_1
                           Table "public.gtest1_1"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 a      | integer |           |          | 
 b      | integer |           |          | generated always as (a * 2) stored
Checksum: t
Inherits: gtest1
Distributed by: (a)

INSERT INTO gtest1_1 VALUES (4);
SELECT * FROM gtest1_1;
 a | b 
---+---
 4 | 8
(1 row)

SELECT * FROM gtest1;
 a | b 
---+---
 3 | 6
 4 | 8
(2 rows)

CREATE TABLE gtest_normal (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest_normal_child (a int, b int GENERATED ALWAYS AS (a * 2) STORED) INHERITS (gtest_normal);
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
\d gtest_normal_child
                      Table "public.gtest_normal_child"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 a      | integer |           |          | 
 b      | integer |           |          | generated always as (a * 2) stored
Checksum: t
Inherits: gtest_normal
Distributed by: (a)

INSERT INTO gtest_normal (a) VALUES (1);
INSERT INTO gtest_normal_child (a) VALUES (2);
SELECT * FROM gtest_normal;
 a | b 
---+---
 1 |  
 2 | 4
(2 rows)

CREATE TABLE gtest_normal_child2 (a int, b int GENERATED ALWAYS AS (a * 3) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtest_normal_child2 INHERIT gtest_normal;
INSERT INTO gtest_normal_child2 (a) VALUES (3);
SELECT * FROM gtest_normal;
 a | b 
---+---
 2 | 4
 3 | 9
 1 |  
(3 rows)

-- test inheritance mismatches between parent and child
CREATE TABLE gtestx (x int, b int GENERATED ALWAYS AS (a * 22) STORED) INHERITS (gtest1);  -- error
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "b" with inherited definition
ERROR:  child column "b" specifies generation expression
HINT:  Omit the generation expression in the definition of the child table column to inherit the generation expression from the parent table.
CREATE TABLE gtestx (x int, b int DEFAULT 10) INHERITS (gtest1);  -- error
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "b" with inherited definition
ERROR:  column "b" inherits from generated column but specifies default
CREATE TABLE gtestx (x int, b int GENERATED ALWAYS AS IDENTITY) INHERITS (gtest1);  -- error
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "b" with inherited definition
ERROR:  column "b" inherits from generated column but specifies identity
CREATE TABLE gtestxx_1 (a int NOT NULL, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtestxx_1 INHERIT gtest1;  -- error
ERROR:  column "b" in child table must be a generated column
CREATE TABLE gtestxx_2 (a int NOT NULL, b int GENERATED ALWAYS AS (a * 22) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtestxx_2 INHERIT gtest1;  -- error
ERROR:  column "b" in child table has a conflicting generation expression
CREATE TABLE gtestxx_3 (a int NOT NULL, b int GENERATED ALWAYS AS (a * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtestxx_3 INHERIT gtest1;  -- ok
CREATE TABLE gtestxx_4 (b int GENERATED ALWAYS AS (a * 2) STORED, a int NOT NULL);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'b' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtestxx_4 INHERIT gtest1;  -- ok
-- test multiple inheritance mismatches
CREATE TABLE gtesty (x int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest1_2 () INHERITS (gtest1, gtesty);  -- error
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging multiple inherited definitions of column "b"
ERROR:  inherited column "b" has a generation conflict
DROP TABLE gtesty;
CREATE TABLE gtesty (x int, b int GENERATED ALWAYS AS (x * 22) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest1_2 () INHERITS (gtest1, gtesty);  -- error
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging multiple inherited definitions of column "b"
ERROR:  column "b" inherits conflicting generation expressions
DROP TABLE gtesty;
CREATE TABLE gtesty (x int, b int DEFAULT 55);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest1_2 () INHERITS (gtest0, gtesty);  -- error
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging multiple inherited definitions of column "b"
ERROR:  inherited column "b" has a generation conflict
DROP TABLE gtesty;
-- test stored update
CREATE TABLE gtest3 (a int, b int GENERATED ALWAYS AS (a * 3) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest3 (a) VALUES (1), (2), (3), (NULL);
SELECT * FROM gtest3 ORDER BY a;
 a | b 
---+---
 1 | 3
 2 | 6
 3 | 9
   |  
(4 rows)

UPDATE gtest3 SET a = 22 WHERE a = 2;
SELECT * FROM gtest3 ORDER BY a;
 a  | b  
----+----
  1 |  3
  3 |  9
 22 | 66
    |   
(4 rows)

CREATE TABLE gtest3a (a text, b text GENERATED ALWAYS AS (a || '+' || a) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest3a (a) VALUES ('a'), ('b'), ('c'), (NULL);
SELECT * FROM gtest3a ORDER BY a;
 a |  b  
---+-----
 a | a+a
 b | b+b
 c | c+c
   | 
(4 rows)

UPDATE gtest3a SET a = 'bb' WHERE a = 'b';
SELECT * FROM gtest3a ORDER BY a;
 a  |   b   
----+-------
 a  | a+a
 bb | bb+bb
 c  | c+c
    | 
(4 rows)

-- COPY
TRUNCATE gtest1;
INSERT INTO gtest1 (a) VALUES (1), (2);
COPY gtest1 TO stdout;
2
1
COPY gtest1 (a, b) TO stdout;
ERROR:  column "b" is a generated column
DETAIL:  Generated columns cannot be used in COPY.
COPY gtest1 FROM stdin;
COPY gtest1 (a, b) FROM stdin;
ERROR:  column "b" is a generated column
DETAIL:  Generated columns cannot be used in COPY.
SELECT * FROM gtest1 ORDER BY a;
 a | b 
---+---
 1 | 2
 2 | 4
 3 | 6
 4 | 8
(4 rows)

TRUNCATE gtest3;
INSERT INTO gtest3 (a) VALUES (1), (2);
COPY gtest3 TO stdout;
2
1
COPY gtest3 (a, b) TO stdout;
ERROR:  column "b" is a generated column
DETAIL:  Generated columns cannot be used in COPY.
COPY gtest3 FROM stdin;
COPY gtest3 (a, b) FROM stdin;
ERROR:  column "b" is a generated column
DETAIL:  Generated columns cannot be used in COPY.
SELECT * FROM gtest3 ORDER BY a;
 a | b  
---+----
 1 |  3
 2 |  6
 3 |  9
 4 | 12
(4 rows)

-- null values
CREATE TABLE gtest2 (a int, b int GENERATED ALWAYS AS (NULL) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest2 VALUES (1);
SELECT * FROM gtest2;
 a | b 
---+---
 1 |  
(1 row)

-- simple column reference for varlena types
CREATE TABLE gtest_varlena (a varchar, b varchar GENERATED ALWAYS AS (a) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest_varlena (a) VALUES('01234567890123456789');
INSERT INTO gtest_varlena (a) VALUES(NULL);
SELECT * FROM gtest_varlena ORDER BY a;
          a           |          b           
----------------------+----------------------
 01234567890123456789 | 01234567890123456789
                      | 
(2 rows)

DROP TABLE gtest_varlena;
-- composite types
CREATE TYPE double_int as (a int, b int);
CREATE TABLE gtest4 (
    a int,
    b double_int GENERATED ALWAYS AS ((a * 2, a * 3)) STORED
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest4 VALUES (1), (6);
SELECT * FROM gtest4;
 a |    b    
---+---------
 1 | (2,3)
 6 | (12,18)
(2 rows)

DROP TABLE gtest4;
DROP TYPE double_int;
-- using tableoid is allowed
CREATE TABLE gtest_tableoid (
  a int,
  b bool GENERATED ALWAYS AS (tableoid = 'gtest_tableoid'::regclass) STORED
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest_tableoid VALUES (1), (2);
ALTER TABLE gtest_tableoid ADD COLUMN
  c regclass GENERATED ALWAYS AS (tableoid) STORED;
SELECT * FROM gtest_tableoid;
 a | b | c 
---+---+---
 2 | t | -
 1 | t | -
(2 rows)

-- drop column behavior
CREATE TABLE gtest10 (a int, b int, c int GENERATED ALWAYS AS (b * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtest10 DROP COLUMN b;
\d gtest10
              Table "public.gtest10"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
Checksum: t
Distributed by: (a)

CREATE TABLE gtest10a (a int, b int GENERATED ALWAYS AS (a * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtest10a DROP COLUMN b;
INSERT INTO gtest10a (a) VALUES (1);
-- privileges
CREATE USER regress_user11;
NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE TABLE gtest11s (a int, b int, c int GENERATED ALWAYS AS (b * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest11s VALUES (1, 10), (2, 20);
GRANT SELECT (a, c) ON gtest11s TO regress_user11;
CREATE FUNCTION gf1(a int) RETURNS int AS $$ SELECT a * 3 $$ IMMUTABLE LANGUAGE SQL;
REVOKE ALL ON FUNCTION gf1(int) FROM PUBLIC;
CREATE TABLE gtest12s (a int, b int, c int GENERATED ALWAYS AS (gf1(b)) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest12s VALUES (1, 10), (2, 20);
GRANT SELECT (a, c) ON gtest12s TO regress_user11;
SET ROLE regress_user11;
SELECT a, b FROM gtest11s;  -- not allowed
ERROR:  permission denied for table gtest11s
SELECT a, c FROM gtest11s;  -- allowed
 a | c  
---+----
 1 | 20
 2 | 40
(2 rows)

SELECT gf1(10);  -- not allowed
ERROR:  permission denied for function gf1
SELECT a, c FROM gtest12s;  -- allowed
 a | c  
---+----
 2 | 60
 1 | 30
(2 rows)

RESET ROLE;
DROP TABLE gtest11s, gtest12s;
DROP FUNCTION gf1(int);
DROP USER regress_user11;
-- check constraints
CREATE TABLE gtest20 (a int, b int GENERATED ALWAYS AS (a * 2) STORED CHECK (b < 50));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest20 (a) VALUES (10);  -- ok
INSERT INTO gtest20 (a) VALUES (30);  -- violates constraint
ERROR:  new row for relation "gtest20" violates check constraint "gtest20_b_check"  (seg1 127.0.1.1:7003 pid=18418)
DETAIL:  Failing row contains (30, 60).
CREATE TABLE gtest20a (a int, b int GENERATED ALWAYS AS (a * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest20a (a) VALUES (10);
INSERT INTO gtest20a (a) VALUES (30);
ALTER TABLE gtest20a ADD CHECK (b < 50);  -- fails on existing row
ERROR:  check constraint "gtest20a_b_check" of relation "gtest20a" is violated by some row  (seg1 127.0.1.1:7003 pid=18418)
CREATE TABLE gtest20b (a int, b int GENERATED ALWAYS AS (a * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest20b (a) VALUES (10);
INSERT INTO gtest20b (a) VALUES (30);
ALTER TABLE gtest20b ADD CONSTRAINT chk CHECK (b < 50) NOT VALID;
ALTER TABLE gtest20b VALIDATE CONSTRAINT chk;  -- fails on existing row
ERROR:  check constraint "chk" of relation "gtest20b" is violated by some row  (seg1 127.0.1.1:7003 pid=18418)
-- not-null constraints
CREATE TABLE gtest21a (a int, b int GENERATED ALWAYS AS (nullif(a, 0)) STORED NOT NULL);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest21a (a) VALUES (1);  -- ok
INSERT INTO gtest21a (a) VALUES (0);  -- violates constraint
ERROR:  null value in column "b" of relation "gtest21a" violates not-null constraint  (seg1 127.0.1.1:7003 pid=18418)
DETAIL:  Failing row contains (0, null).
CREATE TABLE gtest21b (a int, b int GENERATED ALWAYS AS (nullif(a, 0)) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtest21b ALTER COLUMN b SET NOT NULL;
INSERT INTO gtest21b (a) VALUES (1);  -- ok
INSERT INTO gtest21b (a) VALUES (0);  -- violates constraint
ERROR:  null value in column "b" of relation "gtest21b" violates not-null constraint  (seg1 127.0.1.1:7003 pid=18418)
DETAIL:  Failing row contains (0, null).
ALTER TABLE gtest21b ALTER COLUMN b DROP NOT NULL;
INSERT INTO gtest21b (a) VALUES (0);  -- ok now
-- index constraints
CREATE TABLE gtest22a (a int, b int GENERATED ALWAYS AS (a / 2) STORED) distributed replicated;
INSERT INTO gtest22a VALUES (2);
INSERT INTO gtest22a VALUES (3);
INSERT INTO gtest22a VALUES (4);
CREATE TABLE gtest22b (a int, b int GENERATED ALWAYS AS (a / 2) STORED, (a, b));
ERROR:  syntax error at or near "("
LINE 1: ...b (a int, b int GENERATED ALWAYS AS (a / 2) STORED, (a, b));
                                                               ^
INSERT INTO gtest22b VALUES (2);
ERROR:  relation "gtest22b" does not exist
LINE 1: INSERT INTO gtest22b VALUES (2);
                    ^
INSERT INTO gtest22b VALUES (2);
ERROR:  relation "gtest22b" does not exist
LINE 1: INSERT INTO gtest22b VALUES (2);
                    ^
-- indexes
CREATE TABLE gtest22c (a int, b int GENERATED ALWAYS AS (a * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX gtest22c_b_idx ON gtest22c (b);
CREATE INDEX gtest22c_expr_idx ON gtest22c ((b * 3));
CREATE INDEX gtest22c_pred_idx ON gtest22c (a) WHERE b > 0;
\d gtest22c
                           Table "public.gtest22c"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 a      | integer |           |          | 
 b      | integer |           |          | generated always as (a * 2) stored
Checksum: t
Indexes:
    "gtest22c_b_idx" btree (b)
    "gtest22c_expr_idx" btree ((b * 3))
    "gtest22c_pred_idx" btree (a) WHERE b > 0
Distributed by: (a)

INSERT INTO gtest22c VALUES (1), (2), (3);
SET enable_seqscan TO off;
SET enable_bitmapscan TO off;
EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b = 4;
                   QUERY PLAN                    
-------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Bitmap Heap Scan on gtest22c
         Recheck Cond: (b = 4)
         ->  Bitmap Index Scan on gtest22c_b_idx
               Index Cond: (b = 4)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT * FROM gtest22c WHERE b = 4;
 a | b 
---+---
 2 | 4
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b * 3 = 6;
                     QUERY PLAN                     
----------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Bitmap Heap Scan on gtest22c
         Recheck Cond: ((b * 3) = 6)
         ->  Bitmap Index Scan on gtest22c_expr_idx
               Index Cond: ((b * 3) = 6)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT * FROM gtest22c WHERE b * 3 = 6;
 a | b 
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE a = 1 AND b > 0;
                     QUERY PLAN                     
----------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Bitmap Heap Scan on gtest22c
         Recheck Cond: ((a = 1) AND (b > 0))
         ->  Bitmap Index Scan on gtest22c_pred_idx
               Index Cond: (a = 1)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT * FROM gtest22c WHERE a = 1 AND b > 0;
 a | b 
---+---
 1 | 2
(1 row)

RESET enable_seqscan;
RESET enable_bitmapscan;
-- foreign keys
CREATE TABLE gtest23a (x int, y int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest23a VALUES (1, 11), (2, 22), (3, 33);
CREATE TABLE gtest23x (a int, b int GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a (x) ON UPDATE CASCADE);  -- error
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  there is no unique constraint matching given keys for referenced table "gtest23a"
CREATE TABLE gtest23x (a int, b int GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a (x) ON DELETE SET NULL);  -- error
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  there is no unique constraint matching given keys for referenced table "gtest23a"
CREATE TABLE gtest23b (a int, b int GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a (x));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  there is no unique constraint matching given keys for referenced table "gtest23a"
\d gtest23b
INSERT INTO gtest23b VALUES (1);  -- ok
ERROR:  relation "gtest23b" does not exist
LINE 1: INSERT INTO gtest23b VALUES (1);
                    ^
-- GPDB doesn't enforce foreign key constraints, so this doesn't error out.
INSERT INTO gtest23b VALUES (5);  -- error
ERROR:  relation "gtest23b" does not exist
LINE 1: INSERT INTO gtest23b VALUES (5);
                    ^
DROP TABLE gtest23b;
ERROR:  table "gtest23b" does not exist
DROP TABLE gtest23a;
CREATE TABLE gtest23p (x int, y int GENERATED ALWAYS AS (x * 2) STORED, (y));
ERROR:  syntax error at or near "("
LINE 1: ...t23p (x int, y int GENERATED ALWAYS AS (x * 2) STORED, (y));
                                                                  ^
INSERT INTO gtest23p VALUES (1), (2), (3);
ERROR:  relation "gtest23p" does not exist
LINE 1: INSERT INTO gtest23p VALUES (1), (2), (3);
                    ^
CREATE TABLE gtest23q (a int, b int REFERENCES gtest23p (y));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  relation "gtest23p" does not exist
INSERT INTO gtest23q VALUES (1, 2);  -- ok
ERROR:  relation "gtest23q" does not exist
LINE 1: INSERT INTO gtest23q VALUES (1, 2);
                    ^
-- GPDB doesn't enforce foreign key constraints, so this doesn't error out.
INSERT INTO gtest23q VALUES (2, 5);  -- error
ERROR:  relation "gtest23q" does not exist
LINE 1: INSERT INTO gtest23q VALUES (2, 5);
                    ^
-- domains
CREATE DOMAIN gtestdomain1 AS int CHECK (VALUE < 10);
CREATE TABLE gtest24 (a int, b gtestdomain1 GENERATED ALWAYS AS (a * 2) STORED);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest24 (a) VALUES (4);  -- ok
INSERT INTO gtest24 (a) VALUES (6);  -- error
ERROR:  value for domain gtestdomain1 violates check constraint "gtestdomain1_check"  (seg2 127.0.1.1:7004 pid=18420)
-- typed tables (currently not supported)
CREATE TYPE gtest_type AS (f1 integer, f2 text, f3 bigint);
CREATE TABLE gtest28 OF gtest_type (f1 WITH OPTIONS GENERATED ALWAYS AS (f2 *2) STORED);
ERROR:  generated columns are not supported on typed tables
DROP TYPE gtest_type CASCADE;
-- table partitions (currently not supported)
CREATE TABLE gtest_parent (f1 date NOT NULL, f2 text, f3 bigint) PARTITION BY RANGE (f1);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest_child PARTITION OF gtest_parent (
    f3 WITH OPTIONS GENERATED ALWAYS AS (f2 * 2) STORED
) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01'); -- error
ERROR:  generated columns are not supported on partitions
DROP TABLE gtest_parent;
-- partitioned table
CREATE TABLE gtest_parent (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE (f1);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest_child PARTITION OF gtest_parent FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
NOTICE:  table has parent, setting distribution columns to match parent table
INSERT INTO gtest_parent (f1, f2) VALUES ('2016-07-15', 1);
SELECT * FROM gtest_parent;
     f1     | f2 | f3 
------------+----+----
 07-15-2016 |  1 |  2
(1 row)

SELECT * FROM gtest_child;
     f1     | f2 | f3 
------------+----+----
 07-15-2016 |  1 |  2
(1 row)

DROP TABLE gtest_parent;
-- generated columns in partition key (not allowed)
CREATE TABLE gtest_parent (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE (f3);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  cannot use generated column in partition key
LINE 1: ...ENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE (f3);
                                                                   ^
DETAIL:  Column "f3" is a generated column.
CREATE TABLE gtest_parent (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE ((f3 * 3));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  cannot use generated column in partition key
LINE 1: ...ED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE ((f3 * 3));
                                                             ^
DETAIL:  Column "f3" is a generated column.
-- ALTER TABLE ... ADD COLUMN
CREATE TABLE gtest25 (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest25 VALUES (3), (4);
ALTER TABLE gtest25 ADD COLUMN b int GENERATED ALWAYS AS (a * 3) STORED;
SELECT * FROM gtest25 ORDER BY a;
 a | b 
---+---
 3 |  
 4 |  
(2 rows)

ALTER TABLE gtest25 ADD COLUMN x int GENERATED ALWAYS AS (b * 4) STORED;  -- error
ERROR:  cannot use generated column "b" in column generation expression
DETAIL:  A generated column cannot reference another generated column.
ALTER TABLE gtest25 ADD COLUMN x int GENERATED ALWAYS AS (z * 4) STORED;  -- error
ERROR:  column "z" does not exist
ALTER TABLE gtest25 ADD COLUMN c int DEFAULT 42,
  ADD COLUMN x int GENERATED ALWAYS AS (c * 4) STORED;
ALTER TABLE gtest25 ADD COLUMN d int DEFAULT 101;
ALTER TABLE gtest25 ALTER COLUMN d SET DATA TYPE float8,
  ADD COLUMN y float8 GENERATED ALWAYS AS (d * 4) STORED;
SELECT * FROM gtest25 ORDER BY a;
 a | b | c  |  x  |  d  |  y  
---+---+----+-----+-----+-----
 3 |   | 42 | 168 | 101 | 404
 4 |   | 42 | 168 | 101 | 404
(2 rows)

\d gtest25
                                         Table "public.gtest25"
 Column |       Type       | Collation | Nullable |                       Default                        
--------+------------------+-----------+----------+------------------------------------------------------
 a      | integer          |           |          | 
 b      | integer          |           |          | generated always as (a * 3) stored
 c      | integer          |           |          | 42
 x      | integer          |           |          | generated always as (c * 4) stored
 d      | double precision |           |          | 101
 y      | double precision |           |          | generated always as (d * 4::double precision) stored
Checksum: t
Distributed by: (a)

-- ALTER TABLE ... ALTER COLUMN
CREATE TABLE gtest27 (
    a int,
    b int,
    x int GENERATED ALWAYS AS ((a + b) * 2) STORED
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtest27 SET DISTRIBUTED RANDOMLY;
INSERT INTO gtest27 (a, b) VALUES (3, 7), (4, 11);
ALTER TABLE gtest27 ALTER COLUMN a TYPE text;  -- error
ERROR:  cannot alter type of a column used by a generated column
DETAIL:  Column "a" is used by generated column "x".
ALTER TABLE gtest27 ALTER COLUMN x TYPE numeric;
\d gtest27
                                Table "public.gtest27"
 Column |  Type   | Collation | Nullable |                  Default                   
--------+---------+-----------+----------+--------------------------------------------
 a      | integer |           |          | 
 b      | integer |           |          | 
 x      | numeric |           |          | generated always as (((a + b) * 2)) stored
Checksum: t
Distributed randomly

SELECT * FROM gtest27;
 a | b  | x  
---+----+----
 4 | 11 | 30
 3 |  7 | 20
(2 rows)

ALTER TABLE gtest27 ALTER COLUMN x TYPE boolean USING x <> 0;  -- error
ERROR:  generation expression for column "x" cannot be cast automatically to type boolean
ALTER TABLE gtest27 ALTER COLUMN x DROP DEFAULT;  -- error
ERROR:  column "x" of relation "gtest27" is a generated column
HINT:  Use ALTER TABLE ... ALTER COLUMN ... DROP EXPRESSION instead.
-- It's possible to alter the column types this way:
ALTER TABLE gtest27
  DROP COLUMN x,
  ALTER COLUMN a TYPE bigint,
  ALTER COLUMN b TYPE bigint,
  ADD COLUMN x bigint GENERATED ALWAYS AS ((a + b) * 2) STORED;
\d gtest27
                              Table "public.gtest27"
 Column |  Type  | Collation | Nullable |                 Default                  
--------+--------+-----------+----------+------------------------------------------
 a      | bigint |           |          | 
 b      | bigint |           |          | 
 x      | bigint |           |          | generated always as ((a + b) * 2) stored
Checksum: t
Distributed randomly

-- Ideally you could just do this, but not today (and should x change type?):
ALTER TABLE gtest27
  ALTER COLUMN a TYPE float8,
  ALTER COLUMN b TYPE float8;  -- error
ERROR:  cannot alter type of a column used by a generated column
DETAIL:  Column "a" is used by generated column "x".
\d gtest27
                              Table "public.gtest27"
 Column |  Type  | Collation | Nullable |                 Default                  
--------+--------+-----------+----------+------------------------------------------
 a      | bigint |           |          | 
 b      | bigint |           |          | 
 x      | bigint |           |          | generated always as ((a + b) * 2) stored
Checksum: t
Distributed randomly

SELECT * FROM gtest27;
 a | b  | x  
---+----+----
 4 | 11 | 30
 3 |  7 | 20
(2 rows)

-- ALTER TABLE ... ALTER COLUMN ... DROP EXPRESSION
CREATE TABLE gtest29 (
    a int,
    b int GENERATED ALWAYS AS (a * 2) STORED
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO gtest29 (a) VALUES (3), (4);
ALTER TABLE gtest29 ALTER COLUMN a DROP EXPRESSION;  -- error
ERROR:  column "a" of relation "gtest29" is not a stored generated column
ALTER TABLE gtest29 ALTER COLUMN a DROP EXPRESSION IF EXISTS;  -- notice
NOTICE:  column "a" of relation "gtest29" is not a stored generated column, skipping
NOTICE:  column "a" of relation "gtest29" is not a stored generated column, skipping  (seg1 127.0.1.1:7003 pid=18418)
NOTICE:  column "a" of relation "gtest29" is not a stored generated column, skipping  (seg2 127.0.1.1:7004 pid=18420)
NOTICE:  column "a" of relation "gtest29" is not a stored generated column, skipping  (seg0 127.0.1.1:7002 pid=18416)
ALTER TABLE gtest29 ALTER COLUMN b DROP EXPRESSION;
INSERT INTO gtest29 (a) VALUES (5);
INSERT INTO gtest29 (a, b) VALUES (6, 66);
SELECT * FROM gtest29;
 a | b  
---+----
 3 |  6
 4 |  8
 5 |   
 6 | 66
(4 rows)

\d gtest29
              Table "public.gtest29"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
Checksum: t
Distributed by: (a)

-- check that dependencies between columns have also been removed
ALTER TABLE gtest29 DROP COLUMN a;  -- should not drop b
NOTICE:  dropping a column that is part of the distribution policy forces a NULL distribution policy
\d gtest29
              Table "public.gtest29"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 b      | integer |           |          | 
Checksum: t
Distributed randomly

-- with inheritance
CREATE TABLE gtest30 (
    a int,
    b int GENERATED ALWAYS AS (a * 2) STORED
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest30_1 () INHERITS (gtest30);
NOTICE:  table has parent, setting distribution columns to match parent table
ALTER TABLE gtest30 ALTER COLUMN b DROP EXPRESSION;
\d gtest30
              Table "public.gtest30"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
Checksum: t
Number of child tables: 1 (Use \d+ to list them.)
Distributed by: (a)

\d gtest30_1
             Table "public.gtest30_1"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
Checksum: t
Inherits: gtest30
Distributed by: (a)

DROP TABLE gtest30 CASCADE;
NOTICE:  drop cascades to table gtest30_1
CREATE TABLE gtest30 (
    a int,
    b int GENERATED ALWAYS AS (a * 2) STORED
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE gtest30_1 () INHERITS (gtest30);
NOTICE:  table has parent, setting distribution columns to match parent table
ALTER TABLE ONLY gtest30 ALTER COLUMN b DROP EXPRESSION;  -- error
ERROR:  ALTER TABLE / DROP EXPRESSION must be applied to child tables too
\d gtest30
                            Table "public.gtest30"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 a      | integer |           |          | 
 b      | integer |           |          | generated always as (a * 2) stored
Checksum: t
Number of child tables: 1 (Use \d+ to list them.)
Distributed by: (a)

\d gtest30_1
                           Table "public.gtest30_1"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 a      | integer |           |          | 
 b      | integer |           |          | generated always as (a * 2) stored
Checksum: t
Inherits: gtest30
Distributed by: (a)

ALTER TABLE gtest30_1 ALTER COLUMN b DROP EXPRESSION;  -- error
ERROR:  cannot drop generation expression from inherited column
-- LIKE INCLUDING GENERATED and dropped column handling
CREATE TABLE gtest28a (
  a int,
  b int,
  c int,
  x int GENERATED ALWAYS AS (b * 2) STORED
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE gtest28a DROP COLUMN a;
NOTICE:  dropping a column that is part of the distribution policy forces a NULL distribution policy
CREATE TABLE gtest28b (LIKE gtest28a INCLUDING GENERATED);
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
\d gtest28*
                           Table "public.gtest28a"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 b      | integer |           |          | 
 c      | integer |           |          | 
 x      | integer |           |          | generated always as (b * 2) stored
Checksum: t
Distributed randomly

                           Table "public.gtest28b"
 Column |  Type   | Collation | Nullable |              Default               
--------+---------+-----------+----------+------------------------------------
 b      | integer |           |          | 
 c      | integer |           |          | 
 x      | integer |           |          | generated always as (b * 2) stored
Checksum: t
Distributed randomly

