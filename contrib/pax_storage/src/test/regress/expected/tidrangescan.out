-- start_matchignore
-- m/^HINT.*To uniquely identify a row within a distributed table.*/
-- m/^NOTICE.*SELECT uses system-defined column.*/
-- end_matchignore
-- tests for tidrangescans
SET enable_seqscan TO off;
CREATE TABLE tidrangescan(id integer, data text);
-- empty table
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)';
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid < '(1,0)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)';
 ctid 
------
(0 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)';
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid > '(9,0)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)';
 ctid 
------
(0 rows)

-- insert enough tuples to fill at least two pages
INSERT INTO tidrangescan SELECT i,repeat('x', 100) FROM generate_series(1,2400) AS s(i);
-- remove all tuples after the 10th tuple on each page.  Trying to ensure
-- we get the same layout with all CPU architectures and smaller than standard
-- page sizes.
DELETE FROM tidrangescan
WHERE (substring(ctid::text FROM ',(\d+)\)')::integer > 10 OR substring(ctid::text FROM '\((\d+),')::integer > 2) AND gp_segment_id >= 0;
VACUUM tidrangescan;
-- range scans with upper bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid < '(1,0)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
  ctid  
--------
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
(30 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)';
               QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid <= '(1,5)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)';
  ctid  
--------
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
 (1,1)
 (1,2)
 (1,3)
 (1,4)
 (1,5)
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
 (1,1)
 (1,2)
 (1,3)
 (1,4)
 (1,5)
 (0,1)
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (0,7)
 (0,8)
 (0,9)
 (0,10)
 (1,1)
 (1,2)
 (1,3)
 (1,4)
 (1,5)
(45 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid < '(0,0)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
 ctid 
------
(0 rows)

-- range scans with lower bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)';
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid > '(2,8)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)';
  ctid  
--------
 (2,9)
 (2,10)
 (2,9)
 (2,10)
 (2,9)
 (2,10)
(6 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid;
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: ('(2,8)'::tid < ctid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid;
  ctid  
--------
 (2,9)
 (2,10)
 (2,9)
 (2,10)
 (2,9)
 (2,10)
(6 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)';
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid >= '(2,8)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)';
  ctid  
--------
 (2,8)
 (2,9)
 (2,10)
 (2,8)
 (2,9)
 (2,10)
 (2,8)
 (2,9)
 (2,10)
(9 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)';
                 QUERY PLAN                 
--------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid >= '(100,0)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)';
 ctid 
------
(0 rows)

-- range scans with both bounds
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: ((ctid > '(1,4)'::tid) AND ('(1,7)'::tid >= ctid))
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid;
 ctid  
-------
 (1,5)
 (1,6)
 (1,7)
 (1,5)
 (1,6)
 (1,7)
 (1,5)
 (1,6)
 (1,7)
(9 rows)

EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (('(1,7)'::tid >= ctid) AND (ctid > '(1,4)'::tid))
 Optimizer: Postgres query optimizer
(4 rows)

SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)';
 ctid  
-------
 (1,5)
 (1,6)
 (1,7)
 (1,5)
 (1,6)
 (1,7)
 (1,5)
 (1,6)
 (1,7)
(9 rows)

-- extreme offsets
SELECT ctid FROM tidrangescan WHERE ctid > '(0,65535)' AND ctid < '(1,0)' LIMIT 1;
 ctid 
------
(0 rows)

SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)' LIMIT 1;
 ctid 
------
(0 rows)

SELECT ctid FROM tidrangescan WHERE ctid > '(4294967295,65535)';
 ctid 
------
(0 rows)

SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
 ctid 
------
(0 rows)

-- NULLs in the range cannot return tuples
SELECT ctid FROM tidrangescan WHERE ctid >= (SELECT NULL::tid);
 ctid 
------
(0 rows)

-- rescans
EXPLAIN (COSTS OFF)
SELECT t.ctid,t2.c FROM tidrangescan t,
LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2
WHERE t.ctid < '(1,0)' ORDER BY t.ctid;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Sort Key: t.ctid
   ->  Nested Loop
         ->  Gather Motion 3:1  (slice1; segments: 3)
               ->  Seq Scan on tidrangescan t
                     Filter: (ctid < '(1,0)'::tid)
         ->  Materialize
               ->  Aggregate
                     ->  Result
                           Filter: (t2.ctid <= t.ctid)
                           ->  Materialize
                                 ->  Gather Motion 3:1  (slice2; segments: 3)
                                       ->  Seq Scan on tidrangescan t2
 Optimizer: Postgres query optimizer
(14 rows)

-- GPDB test has 3 segments
SELECT t.ctid,t2.c FROM tidrangescan t,
LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2
WHERE t.ctid < '(1,0)' ORDER BY t.ctid;
  ctid  | c  
--------+----
 (0,1)  |  3
 (0,1)  |  3
 (0,1)  |  3
 (0,2)  |  6
 (0,2)  |  6
 (0,2)  |  6
 (0,3)  |  9
 (0,3)  |  9
 (0,3)  |  9
 (0,4)  | 12
 (0,4)  | 12
 (0,4)  | 12
 (0,5)  | 15
 (0,5)  | 15
 (0,5)  | 15
 (0,6)  | 18
 (0,6)  | 18
 (0,6)  | 18
 (0,7)  | 21
 (0,7)  | 21
 (0,7)  | 21
 (0,8)  | 24
 (0,8)  | 24
 (0,8)  | 24
 (0,9)  | 27
 (0,9)  | 27
 (0,9)  | 27
 (0,10) | 30
 (0,10) | 30
 (0,10) | 30
(30 rows)

-- cursors
-- Ensure we get a TID Range scan without a Materialize node.
EXPLAIN (COSTS OFF)
DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Tid Range Scan on tidrangescan
         TID Cond: (ctid < '(1,0)'::tid)
 Optimizer: Postgres query optimizer
(4 rows)

BEGIN;
DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
FETCH NEXT c;
 ctid  
-------
 (0,1)
(1 row)

FETCH NEXT c;
 ctid  
-------
 (0,2)
(1 row)

--start_ignore
FETCH PRIOR c;
 ctid  
-------
 (0,1)
(1 row)

FETCH FIRST c;
 ctid  
-------
 (0,1)
(1 row)

FETCH LAST c;
  ctid  
--------
 (0,10)
(1 row)
--end_ignore
COMMIT;
DROP TABLE tidrangescan;
RESET enable_seqscan;
