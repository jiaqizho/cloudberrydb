-- start_matchignore
-- m/LOG:  statement:/
-- m/no filter/
-- m/bloom filter/
-- m/No sparse filter/
-- end_matchignore
set default_table_access_method to pax;
set pax_enable_debug to on;
set pax_enable_sparse_filter to on;
set vector.enable_vectorization to off;
create table t1(same int, v1 int, v2 int, v3 int, v4 int) using pax with (minmax_columns='v1,v2,v3,v4');
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'same' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t2(same int, v1 int, v2 int, v3 int, v4 int) using pax with (minmax_columns='v1,v2,v3,v4');
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'same' as the Cloudberry Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- two file with minmax(1,400) and minmax(401,800)
insert into t1 values(1, generate_series(1, 100), generate_series(101, 200), generate_series(201, 300), generate_series(301, 400));
insert into t1 values(1, generate_series(401, 500), generate_series(501, 600), generate_series(601, 700), generate_series(701, 800));
insert into t2 values(1, generate_series(1, 100), generate_series(101, 200), generate_series(201, 300), generate_series(301, 400));
insert into t2 values(1, generate_series(401, 500), generate_series(501, 600), generate_series(601, 700), generate_series(701, 800));
analyze t1;
analyze t2;
-- ORCA plan is poor
set optimizer = off; 
set client_min_messages to log;
-- query with quals list which size is > 1
WITH t1_cte AS (
        SELECT v1, v2, v3
        FROM t1 where v2 > 0
)
SELECT t2.*
FROM t2
join t1_cte on t1_cte.v1 = t2.v1 
WHERE 
	t1_cte.v2 < 100
    and ((t1_cte.v1 = 42 AND t2.v1 = 43) OR (t1_cte.v1 = 44 AND t2.v2 = 45)) 
    and t2.v1 < 90;
LOG:  statement: WITH t1_cte AS (
        SELECT v1, v2, v3
        FROM t1 where v2 > 0
)
SELECT t2.*
FROM t2
join t1_cte on t1_cte.v1 = t2.v1 
WHERE 
	t1_cte.v2 < 100
    and ((t1_cte.v1 = 42 AND t2.v1 = 43) OR (t1_cte.v1 = 44 AND t2.v2 = 45)) 
    and t2.v1 < 90;
LOG:  kind file, filter rate: 1 / 2
kind group, no filter.
LOG:  kind file, filter rate: 2 / 2
kind group, no filter.
 same | v1 | v2 | v3 | v4 
------+----+----+----+----
(0 rows)

reset client_min_messages;
LOG:  statement: reset client_min_messages;
set vector.enable_vectorization to on;
set client_min_messages to log;
WITH t1_cte AS (
        SELECT v1, v2, v3
        FROM t1 where v2 > 0
)
SELECT t2.*
FROM t2
join t1_cte on t1_cte.v1 = t2.v1 
WHERE 
	t1_cte.v2 < 100
    and ((t1_cte.v1 = 42 AND t2.v1 = 43) OR (t1_cte.v1 = 44 AND t2.v2 = 45)) 
    and t2.v1 < 90;
LOG:  statement: WITH t1_cte AS (
        SELECT v1, v2, v3
        FROM t1 where v2 > 0
)
SELECT t2.*
FROM t2
join t1_cte on t1_cte.v1 = t2.v1 
WHERE 
	t1_cte.v2 < 100
    and ((t1_cte.v1 = 42 AND t2.v1 = 43) OR (t1_cte.v1 = 44 AND t2.v2 = 45)) 
    and t2.v1 < 90;
LOG:  kind file, filter rate: 1 / 2
kind group, filter rate: 0 / 1
LOG:  kind file, filter rate: 2 / 2
kind group, no filter.
 same | v1 | v2 | v3 | v4 
------+----+----+----+----
(0 rows)

reset client_min_messages;
LOG:  statement: reset client_min_messages;
reset vector.enable_vectorization;
reset optimizer;
drop table t1;
drop table t2;
